#!/bin/bash

# ClutterFreeSpaces B2B Outreach Campaign Management
# Create, manage, and execute outreach campaigns

set -euo pipefail

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
OUTREACH_DIR="$PROJECT_ROOT/outreach"
DB_PATH="$PROJECT_ROOT/.claude/data/metrics.db"

# Load environment variables
if [[ -f "$PROJECT_ROOT/.env" ]]; then
    set -a
    source "$PROJECT_ROOT/.env"
    set +a
fi

# Set default values
DAILY_OUTREACH_LIMIT="${DAILY_OUTREACH_LIMIT:-20}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Helper functions
print_header() {
    echo -e "${PURPLE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${PURPLE}  $1${NC}"
    echo -e "${PURPLE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ $1${NC}"
}

# Check if database exists
check_database() {
    if [ ! -f "$DB_PATH" ]; then
        print_error "Database not found at $DB_PATH"
        exit 1
    fi
}

# Check SendGrid configuration
check_sendgrid() {
    if [ -z "${SendGrid_API_Key:-}" ]; then
        print_error "SendGrid API key not found in environment"
        echo "Set SendGrid_API_Key environment variable"
        exit 1
    fi
    
    print_success "SendGrid API key configured"
}

# Create new campaign
create_campaign() {
    local campaign_type="$1"
    local name="$2"
    local description="${3:-}"
    
    print_header "Creating $campaign_type Campaign"
    
    if [ "$campaign_type" = "home" ]; then
        campaign_id=$(python3 -c "
import sys; sys.path.append('.')
from outreach.lib.campaign_manager import create_home_organization_campaign
campaign_id = create_home_organization_campaign('$name', '$description')
print(campaign_id)
")
    elif [ "$campaign_type" = "rv" ]; then
        campaign_id=$(python3 -c "
import sys; sys.path.append('.')
from outreach.lib.campaign_manager import create_rv_organization_campaign
campaign_id = create_rv_organization_campaign('$name', '$description')
print(campaign_id)
")
    else
        print_error "Invalid campaign type. Use 'home' or 'rv'"
        exit 1
    fi
    
    print_success "Created campaign ID: $campaign_id"
    print_info "Campaign status: DRAFT (use 'activate' to start sending)"
    
    echo "$campaign_id"
}

# List campaigns
list_campaigns() {
    print_header "B2B Outreach Campaigns"
    
    sqlite3 "$DB_PATH" -header -column <<EOF
SELECT 
    id,
    name,
    campaign_type,
    status,
    target_contacts,
    daily_send_limit,
    start_date,
    created_at
FROM outreach_campaigns
ORDER BY created_at DESC;
EOF
}

# Show campaign details
show_campaign() {
    local campaign_id="$1"
    
    print_header "Campaign Details: ID $campaign_id"
    
    # Basic campaign info
    campaign_info=$(sqlite3 "$DB_PATH" -json <<EOF
SELECT 
    id,
    name,
    campaign_type,
    description,
    status,
    target_contacts,
    daily_send_limit,
    start_date,
    end_date,
    created_at,
    updated_at
FROM outreach_campaigns
WHERE id = $campaign_id;
EOF
)
    
    if [ "$campaign_info" = "[]" ]; then
        print_error "Campaign $campaign_id not found"
        exit 1
    fi
    
    echo "$campaign_info" | jq -r '.[0] | 
        "Campaign: \(.name)",
        "Type: \(.campaign_type)",
        "Status: \(.status)",
        "Description: \(.description // "No description")",
        "",
        "Settings:",
        "  Target Contacts: \(.target_contacts)",
        "  Daily Send Limit: \(.daily_send_limit)",
        "  Start Date: \(.start_date // "Not started")",
        "  End Date: \(.end_date // "No end date")",
        "",
        "Dates:",
        "  Created: \(.created_at)",
        "  Updated: \(.updated_at)"
    '
    
    echo ""
    
    # Campaign sequences
    print_info "Campaign Sequences:"
    sqlite3 "$DB_PATH" -header -column <<EOF
SELECT 
    sequence_order as "Seq",
    delay_days as "Delay",
    sent_count as "Sent",
    opened_count as "Opens",
    clicked_count as "Clicks",
    replied_count as "Replies"
FROM campaign_sequences
WHERE campaign_id = $campaign_id
ORDER BY sequence_order;
EOF
    
    echo ""
    
    # Enrollment stats
    print_info "Enrollment Statistics:"
    sqlite3 "$DB_PATH" -header -column <<EOF
SELECT 
    status as "Status",
    COUNT(*) as "Count"
FROM campaign_contacts
WHERE campaign_id = $campaign_id
GROUP BY status
ORDER BY status;
EOF
    
    echo ""
    
    # Performance stats
    
    python3 -c "
import sys; sys.path.append('.')
from outreach.lib.campaign_manager import CampaignManager
import json

manager = CampaignManager()
stats = manager.get_campaign_stats($campaign_id)

if stats:
    print('Performance Metrics:')
    print(f'  Total Enrolled: {stats.get(\"total_enrolled\", 0)}')
    print(f'  Emails Sent: {stats.get(\"total_emails_sent\", 0)}')
    print(f'  Delivery Rate: {stats.get(\"delivery_rate\", 0)}%')
    print(f'  Open Rate: {stats.get(\"open_rate\", 0)}%')
    print(f'  Click Rate: {stats.get(\"click_through_rate\", 0)}%')
    print(f'  Reply Rate: {stats.get(\"reply_rate\", 0)}%')
    print(f'  Conversions: {stats.get(\"total_conversions\", 0)}')
else:
    print('No performance data available yet')
"
}

# Activate campaign
activate_campaign() {
    local campaign_id="$1"
    
    print_header "Activating Campaign $campaign_id"
    
    
    result=$(python3 -c "
import sys; sys.path.append('.')
from outreach.lib.campaign_manager import CampaignManager
manager = CampaignManager()
success = manager.activate_campaign($campaign_id)
print('success' if success else 'failed')
")
    
    if [ "$result" = "success" ]; then
        print_success "Campaign $campaign_id activated"
        print_info "Emails will be sent according to schedule and daily limits"
    else
        print_error "Failed to activate campaign $campaign_id"
        exit 1
    fi
}

# Pause campaign
pause_campaign() {
    local campaign_id="$1"
    
    print_header "Pausing Campaign $campaign_id"
    
    
    result=$(python3 -c "
import sys; sys.path.append('.')
from outreach.lib.campaign_manager import CampaignManager
manager = CampaignManager()
success = manager.pause_campaign($campaign_id)
print('success' if success else 'failed')
")
    
    if [ "$result" = "success" ]; then
        print_success "Campaign $campaign_id paused"
        print_info "No more emails will be sent until campaign is reactivated"
    else
        print_error "Failed to pause campaign $campaign_id"
        exit 1
    fi
}

# Show eligible contacts for enrollment
show_eligible_contacts() {
    local campaign_type="$1"
    local limit="${2:-20}"
    
    print_header "Eligible Contacts for $campaign_type Campaign"
    
    
    python3 -c "
import sys; sys.path.append('.')
from outreach.lib.campaign_manager import CampaignManager
import json

manager = CampaignManager()
contacts = manager.get_eligible_contacts('${campaign_type}_organization', $limit)

if contacts:
    print(f'Found {len(contacts)} eligible contacts:\\n')
    for i, contact in enumerate(contacts[:$limit], 1):
        print(f'{i:2d}. {contact[\"full_name\"]} ({contact[\"title\"] or \"Contact\"})')
        print(f'    {contact[\"business_name\"]} - {contact[\"city\"]}, {contact[\"state\"]}')
        print(f'    {contact[\"email\"]} | {contact[\"business_type\"]}')
        print(f'    Partnership Score: {contact[\"partnership_potential\"]}/100 | Decision Maker: {\"Yes\" if contact[\"decision_maker\"] else \"No\"}')
        print()
else:
    print('No eligible contacts found')
    print('Make sure you have imported business contacts using the outreach-discover command')
"
}

# Enroll contacts in campaign
enroll_contacts() {
    local campaign_id="$1"
    local count="${2:-10}"
    
    print_header "Enrolling Contacts in Campaign $campaign_id"
    
    # Get campaign type
    campaign_type=$(sqlite3 "$DB_PATH" -noheader "SELECT campaign_type FROM outreach_campaigns WHERE id = $campaign_id;")
    
    if [ -z "$campaign_type" ]; then
        print_error "Campaign $campaign_id not found"
        exit 1
    fi
    
    
    result=$(python3 -c "
import sys; sys.path.append('.')
from outreach.lib.campaign_manager import CampaignManager

manager = CampaignManager()

# Get eligible contacts
contacts = manager.get_eligible_contacts('$campaign_type', $count)
if not contacts:
    print('no_contacts')
    exit()

contact_ids = [c['contact_id'] for c in contacts[:$count]]

# Enroll contacts
enrolled = manager.enroll_contacts_in_campaign($campaign_id, contact_ids)
print(f'enrolled_{enrolled}')
")
    
    if [[ "$result" = "no_contacts" ]]; then
        print_error "No eligible contacts found for enrollment"
        print_info "Run 'outreach-discover' to find more business contacts"
        exit 1
    elif [[ "$result" = enrolled_* ]]; then
        enrolled_count="${result#enrolled_}"
        print_success "Enrolled $enrolled_count contacts in campaign $campaign_id"
        print_info "Contacts will receive first email when campaign is active"
    else
        print_error "Failed to enroll contacts: $result"
        exit 1
    fi
}

# Send pending emails
send_emails() {
    local campaign_id="${1:-}"
    local dry_run="${2:-false}"
    local max_sends="${3:-}"
    
    if [ "$dry_run" = "true" ]; then
        print_header "DRY RUN: Sending Pending Emails"
        print_warning "This is a dry run - no emails will actually be sent"
    else
        print_header "Sending Pending Emails"
        check_sendgrid
    fi
    
    
    
    local python_args=""
    if [ -n "$campaign_id" ]; then
        python_args="campaign_id=$campaign_id, "
    fi
    if [ "$dry_run" = "true" ]; then
        python_args="${python_args}dry_run=True, "
    fi
    if [ -n "$max_sends" ]; then
        python_args="${python_args}max_sends=$max_sends"
    fi
    
    python3 -c "
import sys; sys.path.append('.')
from outreach.lib.campaign_manager import CampaignManager
import json

manager = CampaignManager()
stats = manager.send_pending_emails($python_args)

print(json.dumps(stats, indent=2))
"
}

# Show pending email count
show_pending() {
    local campaign_id="${1:-}"
    
    print_header "Pending Emails"
    
    
    
    if [ -n "$campaign_id" ]; then
        count=$(python3 -c "
import sys; sys.path.append('.')
from outreach.lib.campaign_manager import CampaignManager
manager = CampaignManager()
print(manager.get_pending_email_count($campaign_id))
")
        echo "Pending emails for campaign $campaign_id: $count"
    else
        count=$(python3 -c "
import sys; sys.path.append('.')
from outreach.lib.campaign_manager import CampaignManager
manager = CampaignManager()
print(manager.get_pending_email_count())
")
        echo "Total pending emails across all campaigns: $count"
    fi
    
    # Show daily limit status
    sent_today=$(sqlite3 "$DB_PATH" -noheader "
SELECT COUNT(*) FROM email_sends 
WHERE DATE(sent_at) = DATE('now') 
AND status NOT IN ('failed', 'bounced');
")
    
    daily_limit=$(grep "DAILY_OUTREACH_LIMIT" "$OUTREACH_DIR/config/settings.py" | cut -d'"' -f2 || echo "20")
    
    echo "Sent today: $sent_today / $daily_limit"
    
    if [ "$sent_today" -ge "$daily_limit" ]; then
        print_warning "Daily sending limit reached"
    else
        remaining=$((daily_limit - sent_today))
        print_info "Can send $remaining more emails today"
    fi
}

# Show campaign statistics
show_stats() {
    local campaign_id="${1:-}"
    
    if [ -n "$campaign_id" ]; then
        print_header "Campaign $campaign_id Statistics"
        
        
        python3 -c "
import sys; sys.path.append('.')
from outreach.lib.campaign_manager import CampaignManager
import json

manager = CampaignManager()
stats = manager.get_campaign_stats($campaign_id)

if stats:
    print(json.dumps(stats, indent=2, default=str))
else:
    print('No statistics available for campaign $campaign_id')
"
    else
        print_header "All Campaigns Statistics"
        
        
        python3 -c "
import sys; sys.path.append('.')
from outreach.lib.campaign_manager import CampaignManager
import json

manager = CampaignManager()
stats = manager.get_campaign_stats()

if stats:
    print(json.dumps(stats, indent=2, default=str))
else:
    print('No campaign statistics available')
"
    fi
}

# Test email functionality
test_email() {
    local email="$1"
    local name="${2:-Test Contact}"
    
    print_header "Testing Email Functionality"
    check_sendgrid
    
    
    result=$(python3 -c "
import sys; sys.path.append('.')
from outreach.lib.sendgrid_client import send_test_email
success = send_test_email('$email', '$name')
print('success' if success else 'failed')
")
    
    if [ "$result" = "success" ]; then
        print_success "Test email sent successfully to $email"
    else
        print_error "Failed to send test email to $email"
        exit 1
    fi
}

# Main command dispatcher
main() {
    local command="${1:-help}"
    
    case "$command" in
        "create")
            if [ $# -lt 3 ]; then
                echo "Usage: outreach-campaign create <home|rv> <name> [description]"
                exit 1
            fi
            check_database
            create_campaign "$2" "$3" "${4:-}"
            ;;
            
        "list")
            check_database
            list_campaigns
            ;;
            
        "show")
            if [ $# -lt 2 ]; then
                echo "Usage: outreach-campaign show <campaign_id>"
                exit 1
            fi
            check_database
            show_campaign "$2"
            ;;
            
        "activate")
            if [ $# -lt 2 ]; then
                echo "Usage: outreach-campaign activate <campaign_id>"
                exit 1
            fi
            check_database
            activate_campaign "$2"
            ;;
            
        "pause")
            if [ $# -lt 2 ]; then
                echo "Usage: outreach-campaign pause <campaign_id>"
                exit 1
            fi
            check_database
            pause_campaign "$2"
            ;;
            
        "eligible")
            if [ $# -lt 2 ]; then
                echo "Usage: outreach-campaign eligible <home|rv> [limit]"
                exit 1
            fi
            check_database
            show_eligible_contacts "$2" "${3:-20}"
            ;;
            
        "enroll")
            if [ $# -lt 2 ]; then
                echo "Usage: outreach-campaign enroll <campaign_id> [count]"
                exit 1
            fi
            check_database
            enroll_contacts "$2" "${3:-10}"
            ;;
            
        "send")
            check_database
            if [ "$2" = "--dry-run" ]; then
                send_emails "${3:-}" "true" "${4:-}"
            else
                send_emails "$2" "false" "$3"
            fi
            ;;
            
        "pending")
            check_database
            show_pending "${2:-}"
            ;;
            
        "stats")
            check_database
            show_stats "${2:-}"
            ;;
            
        "test-email")
            if [ $# -lt 2 ]; then
                echo "Usage: outreach-campaign test-email <email> [name]"
                exit 1
            fi
            test_email "$2" "${3:-Test Contact}"
            ;;
            
        "help"|"--help"|"-h")
            print_header "ClutterFreeSpaces B2B Outreach Campaign Management"
            cat << EOF

COMMANDS:
  create <home|rv> <name> [desc]    Create new campaign
  list                              List all campaigns  
  show <campaign_id>                Show campaign details
  
  activate <campaign_id>            Activate campaign (start sending)
  pause <campaign_id>               Pause campaign (stop sending)
  
  eligible <home|rv> [limit]        Show eligible contacts for campaign
  enroll <campaign_id> [count]      Enroll contacts in campaign
  
  send [campaign_id] [max]          Send pending emails
  send --dry-run [campaign_id]      Test send without actually sending
  
  pending [campaign_id]             Show pending email count
  stats [campaign_id]               Show campaign statistics
  
  test-email <email> [name]         Send test email to verify setup

EXAMPLES:
  outreach-campaign create home "Spring 2025 Home Partners" "Q2 home organization campaign"
  outreach-campaign create rv "RV Season Partners" "Summer RV organization outreach"  
  
  outreach-campaign eligible home 20
  outreach-campaign enroll 1 15
  outreach-campaign activate 1
  
  outreach-campaign send --dry-run
  outreach-campaign send 1 5
  
  outreach-campaign stats 1

WORKFLOW:
  1. Create campaign: create <home|rv> <name>
  2. Check eligible contacts: eligible <home|rv>
  3. Enroll contacts: enroll <campaign_id> <count>
  4. Activate campaign: activate <campaign_id>
  5. Send emails: send [campaign_id]
  6. Monitor performance: stats [campaign_id]

EOF
            ;;
            
        *)
            print_error "Unknown command: $command"
            echo "Run 'outreach-campaign help' for usage information"
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"